<?xml version="1.0" encoding="UTF-8"?>
<job-scheduling-data
	xmlns="http://www.quartz-scheduler.org/xml/JobSchedulingData"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.quartz-scheduler.org/xml/JobSchedulingData 
	http://www.quartz-scheduler.org/xml/job_scheduling_data_1_8.xsd"
	version="1.8">
 
	<schedule>
		<job>
			<name>JobA</name>
			<group>GroupDummy</group>
			<description>This is Job A</description>
			<job-class>com.mkyong.jobs.JobA</job-class>
		</job>
 
		<trigger>
			<cron>
				<name>dummyTriggerNameA</name>
				<job-name>JobA</job-name>
				<job-group>GroupDummy</job-group>
				<!-- It will run every 30 seconds -->
				<cron-expression>0/30 * * * * ?</cron-expression>
			</cron>
		</trigger>
	</schedule>
 
	<schedule>
		<job>
			<name>JobB</name>
			<group>GroupDummy</group>
			<description>This is Job B</description>
			<job-class>com.mkyong.jobs.JobB</job-class>
		</job>
 
		<trigger>
			<cron>
				<name>dummyTriggerNameB</name>
				<job-name>JobB</job-name>
				<job-group>GroupDummy</job-group>
				<!-- It will run every 30 seconds -->
				<cron-expression>0/30 * * * * ?</cron-expression>
			</cron>
		</trigger>
		
	<!-- C R A W L E R    S E T T I N G S 				-->
	<!-- T W I T T E R    C R A W L E R    (WORKS)		-->
	<job>
		<name>TwitterCrawler</name>
		<group>CrawlerJob</group>
		<job-class>jobClass" value="de.comlineag.snc.job.TwitterCrawler" </job-class>
		<property name="jobDataAsMap">
			<map>
				<!-- These are the security tokens for the twitter API -->
				<entry key="consumerKey" value="zlGuAavBH2T23hIm57l8WA" />
				<entry key="consumerSecret" value="xzqH6lLWnXLvlHJooNDaCDXlzJzv976JcWt8y2eyHBk" />
				<entry key="token" value="754994-KDec8qJBwEggHwHQ9XO0X7QBx1VCOZwgbgtpYiibWjl" />
				<entry key="tokenSecret" value="qm1dqrJas8Lf2ANU8Lx470TkcUSndWLwvJ1I2huZKvJrc" />
			</map>
		</property>
	</job>
	
	<trigger>
		<name>TwitterCrawlerTrigger</name>
		<job-name>TwitterCrawler</job-name>
		<group>CrawlerJob</group>
		<cron-expression>0/30 * * * * ?</cron-expression>
	</trigger>
	
	
	<!-- L I T H I U M    C R A W L E R    (WORKS) -->
	<job>
		<name>LithiumCrawler</name>
		<job-class>de.comlineag.snc.job.LithiumCrawler</job-class>
		<property name="jobDataAsMap">
			<map>
				<!-- These are security tokens -->
				<entry key="consumerKey" value="" />
				<entry key="consumerSecret" value="" />
				<entry key="token" value="" />
				<entry key="tokenSecret" value="" />
				
				<!-- login settings - are encrypted using base64 -->
				<entry key="user" value="Y21yYWw=" />
				<entry key="passwd" value="MTIzVGVzdDEyMw==" />
				
				<!-- with these entries the url to the communities' rest api is generated -->
				<entry key="protocol" value="https" />
				<entry key="port" value="443" />
				<entry key="server_url" value="wissen.cortalconsors.de" />
				<entry key="rest_api_loc" value="/restapi/vc" />
			</map>
		</property>
	</job>
	<trigger>
		<name>LithiumCrawlerTrigger</name>
		<property name="jobDetail" ref="LithiumCrawlerDetail" />
		<property name="startDelay" value="2000" />
		<property name="repeatInterval" value="150000" />
	</bean>
	
	
	<!-- F A C E B O O K    C R A W L E R    (TO BE IMPLEMENTED) -->
	<bean name="FacebookCrawlerDetail"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="de.comlineag.snc.job.FacebookCrawler" />
		<!-- <property name="concurrent" value="false" /> -->
		<property name="durability" value="true" />
		<property name="jobDataAsMap">
			<map>
				<!-- These are security tokens -->
				<entry key="consumerKey" value="" />
				<entry key="consumerSecret" value="" />
				<entry key="token" value="" />
				<entry key="tokenSecret" value="" />
				
				<!-- login settings -->
				<entry key="user" value="" />
				<entry key="passwd" value="" />
				
				<!-- with these entries the url to the rest api and graph engine is generated -->
				<entry key="protocol" value="https" />
				<entry key="port" value="443" />
				<entry key="server_url" value="graph.facebook.com" />
				<entry key="graph_api_loc" value="/graph" />
				<entry key="rest_api_loc" value="/restapi/" />
			</map>
		</property>
	</bean>
	<bean id="FacebookCrawlerTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="FacebookCrawlerDetail" />
		<!-- 1 second delay after startup -->
		<property name="startDelay" value="1500" />
		<!-- repeat the job every 
							5000 - 50 seconds 
							6000 - 1 minutes 
							15000 - 2,5 minutes (round about) 
							30000 - 5 minutes -->
		<property name="repeatInterval" value="150000" />
	</bean>
	
	
	<!-- G O O G L E    C R A W L E R    (TO BE DEFINED) -->
<!--  
	<bean name="GoogleCrawlerDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"> 
		<property name="jobClass" value="de.comlineag.snc.job.GoogleCrawler" /> 
		<property name="concurrent" value="false" />
		<property name="durability" value="true" />
		<property name="jobDataAsMap">
			<map> 
				<entry key="consumerKey" value="" /> 
				<entry key="consumerSecret" value="" /> 
				<entry key="token" value="" /> 
				<entry key="tokenSecret" value="" /> 
				
				<entry key="user" value="" /> 
				<entry key="passwd" value="" /> 
				
				<entry key="protocol" value="https" /> 
				<entry key="port" value="443" /> 
				<entry key="server_url"	value="google.com" /> 
				<entry key="graph_api_loc" value="/graph" /> 
				<entry key="rest_api_loc" value="/restapi/" /> 
				
-->
				<!-- first customer specific implementation -->
<!--
				<entry key="customer" value="CortalConsors" />
			</map> 
		</property> 
	</bean> 
	<bean id="GoogleCrawlerTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"> 
		<property name="jobDetail" ref="GoogleCrawlerDetail" />
--> 
		<!-- 1 second delay after startup -->
<!-- 
		<property name="startDelay" value="1000" />
--> 
		<!-- repeat the job every 
							5000 - 50 seconds 
							6000 - 1 minutes 
							15000 - 2,5 minutes (round about) 
							30000 - 5 minutes -->
<!-- 
		<property name="repeatInterval" value="150000" /> 
	</bean> 
-->
	</schedule>
</job-scheduling-data>