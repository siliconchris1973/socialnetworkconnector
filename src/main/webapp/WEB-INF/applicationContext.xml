<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. 
-->
<!-- @version $Id: applicationContext.xml 561608 2007-08-01 00:33:12Z vgritsenko $ -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/jdbc 
                           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!-- Activate Spring annotation support -->
	<context:annotation-config />

	<context:component-scan base-package="de.comlineag.snc.job" />
	<context:component-scan base-package="de.comlineag.snc.handler" />

	<tx:annotation-driven />

	<bean id="contextApplicationContextProvider" class="de.comlineag.snc.persistence.ApplicationContextProvider"></bean>



	<!-- C R A W L E R    S E T T I N G S -->
	<!-- T W I T T E R    C R A W L E R    (WORKS) -->
	<bean name="TwitterCrawlerDetail"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="de.comlineag.snc.job.TwitterCrawler" />
		<property name="jobDataAsMap">
			<map>
				<!-- These are the security tokens for the twitter API -->
				<entry key="consumerKey" value="zlGuAavBH2T23hIm57l8WA" />
				<entry key="consumerSecret" value="xzqH6lLWnXLvlHJooNDaCDXlzJzv976JcWt8y2eyHBk" />
				<entry key="token" value="754994-KDec8qJBwEggHwHQ9XO0X7QBx1VCOZwgbgtpYiibWjl" />
				<entry key="tokenSecret" value="qm1dqrJas8Lf2ANU8Lx470TkcUSndWLwvJ1I2huZKvJrc" />

				<!-- 
					entries for server, protocol and location are taken from constants 
					from the hbc twitter api 
				-->
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>
	<bean id="TwitterCrawlerTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="TwitterCrawlerDetail" />
		<!-- 1 second delay after startup -->
		<property name="startDelay" value="1000" />
		<!-- repeat the job every 
							5000 - 50 seconds 
							6000 - 1 minutes 
							15000 - 2,5 minutes (round about) 
							30000 - 5 minutes -->
		<property name="repeatInterval" value="30000" />
	</bean>
	
	
	<!-- L I T H I U M    C R A W L E R    (WORKS) -->
	<bean name="LithiumCrawlerDetail"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="de.comlineag.snc.job.LithiumCrawler" />
		<property name="jobDataAsMap">
			<map>
				<!-- These are security tokens -->
				<entry key="consumerKey" value="" />
				<entry key="consumerSecret" value="" />
				<entry key="token" value="" />
				<entry key="tokenSecret" value="" />

				<!-- login settings - are encrypted using base64 -->
				<entry key="user" value="Y21yYWw=" />
				<entry key="passwd" value="MTIzVGVzdDEyMw==" />

				<!-- with these entries the url to the communities' rest api is generated -->
				<entry key="PROTOCOL" value="https" />
				<entry key="PORT" value="443" />
				<entry key="SERVER_URL" value="wissen.cortalconsors.de" />
				<entry key="REST_API_LOC" value="/restapi/vc" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>
	<bean id="LithiumCrawlerTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="LithiumCrawlerDetail" />
		<!-- 1 second delay after startup -->
		<property name="startDelay" value="1000" />
		<!-- repeat the job every 	5000 - 50 seconds 
									6000 - 1 minutes 
									15000 - 2,5 minutes (round about) 
									30000 - 5 minutes -->
		<property name="repeatInterval" value="150000" />
	</bean>
	
	
	<!-- F A C E B O O K    C R A W L E R    (TO BE IMPLEMENTED) -->
	<bean name="FacebookCrawlerDetail"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="de.comlineag.snc.job.FacebookCrawler" />
		<property name="jobDataAsMap">
			<map>
				<!-- These are security tokens -->
				<entry key="consumerKey" value="" />
				<entry key="consumerSecret" value="" />
				<entry key="token" value="" />
				<entry key="tokenSecret" value="" />

				<!-- login settings -->
				<entry key="user" value="" />
				<entry key="passwd" value="" />

				<!-- with these entries the url to the rest api and graph engine is generated -->
				<entry key="PROTOCOL" value="https" />
				<entry key="PORT" value="443" />
				<entry key="SERVER_URL" value="facebook.com" />
				<entry key="GRAPH_ENDPOINT" value="/graph" />
				<entry key="REST_API_LOC" value="/restapi/" />
			</map>
		</property>
		<property name="durability" value="true" />
	</bean>
	<bean id="FacebookCrawlerTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="FacebookCrawlerDetail" />
		<!-- 1 second delay after startup -->
		<property name="startDelay" value="1000" />
		<!-- repeat the job every 
							5000 - 50 seconds 
							6000 - 1 minutes 
							15000 - 2,5 minutes (round about) 
							30000 - 5 minutes -->
		<property name="repeatInterval" value="150000" />
	</bean>
	
	
	<!-- G O O G L E    C R A W L E R    (TO BE DEFINED) -->
<!--  
	<bean name="GoogleCrawlerDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"> 
		<property name="jobClass" value="de.comlineag.snc.job.GoogleCrawler" /> 
		<property name="jobDataAsMap">
			<map> 
				<entry key="consumerKey" value="" /> 
				<entry key="consumerSecret" value="" /> 
				<entry key="token" value="" /> 
				<entry key="tokenSecret" value="" /> 
				
				<entry key="user" value="" /> 
				<entry key="passwd" value="" /> 
				
				<entry key="PROTOCOL" value="https" /> 
				<entry key="PORT" value="443" /> 
				<entry key="SERVER_URL"	value="google.com" /> 
				<entry key="GRAPH_ENDPOINT" value="/graph" /> 
				<entry key="REST_API_LOC" value="/restapi/" /> 
			</map> 
		</property> 
		<property name="durability" value="true" /> 
	</bean> 
	<bean id="GoogleCrawlerTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"> 
		<property name="jobDetail" ref="GoogleCrawlerDetail" />
--> 
		<!-- 1 second delay after startup -->
<!-- 
		<property name="startDelay" value="1000" />
--> 
		<!-- repeat the job every 
							5000 - 50 seconds 
							6000 - 1 minutes 
							15000 - 2,5 minutes (round about) 
							30000 - 5 minutes -->
<!-- 
		<property name="repeatInterval" value="150000" /> 
	</bean> 
-->


	<!-- C O N F I G U R A T I O N    S E T T I N G S -->
	<!-- this is the bean to get the crawler configuration from the HANA (TO BE IMPLEMENETED) -->
	<!-- 
	<bean id="configurationManager" class="de.comlineag.snc.persistence.HANAConfigurationPersistence"> 
		<property name="host" value="192.168.131.30" /> 
		<property name="port" value="8000" /> 
		<property name="jdbcPort" value="30015" /> 
		<property name="protocol" value="http" /> 
		
		<property name="location" value="/comline/snc/services" /> 
		<property name="user" value="U0JNX0VYVA==" /> 
		<property name="pass" value="TW9uIzRwb3Mhc29DSUFM" /> 
	</bean> 
	-->

	<!-- this is the bean to get the crawler configuration from an xml file (IN PROGRESS) -->
	<bean id="configurationManager" class="de.comlineag.snc.persistence.XMLFileConfigurationPersistence"> 
		<property name="configDbHandler" value="src/main/webapp/WEB-INF/CrawlerConfiguration.xml" /> 
	</bean> 
	
	<!-- this is the bean to get the crawler configuration from an ini file (WORKS WITH RESTRICTIONS - NO CRAWLER SPECIFIC CONFIG POSSIBLE) -->
	<!--
	<bean id="configurationManager" class="de.comlineag.snc.persistence.IniFileConfigurationPersistence">
		<property name="configDbHandler" value="src/main/webapp/WEB-INF/CrawlerConfiguration.ini" />
	</bean>
	-->

	<!-- P E R S I S T E N C E    S E T T I N G S -->
	<!-- You may choose exactly one of the provided persistence manager -->
	<!-- H A N A    P E R S I S T E N C E    (WORKS) -->
	<bean id="persistenceManager" class="de.comlineag.snc.persistence.HANAPersistence">
		<property name="host" value="192.168.131.30" />
		<property name="port" value="8000" />
		<property name="jdbcPort" value="30015" />
		<property name="protocol" value="http" />
		<property name="location" value="/comline/sbm/services" />
		<property name="serviceUserEndpoint" value="saveUser.xsodata" />
		<property name="servicePostEndpoint" value="savePost.xsodata" />
		<property name="user" value="U0JNX0VYVA==" />
		<property name="pass" value="TW9uIzRwb3Mhc29DSUFM" />
	</bean>

	<!-- N E O 4 J    P E R S I S T E N C E    (WORKS) -->
	<!-- 
	<bean id="persistenceManager" class="de.comlineag.snc.persistence.Neo4JPersistence"> 
		<property name="protocol" value="http" /> 
		<property name="host" value="localhost" /> 
		<property name="port" value="7474" /> 
		<property name="location" value="/db/data" /> 
		<property name="DB_PATH" value="/db/data" /> 
	</bean> 
	-->
	
	<!-- N E O 4 J    E M B E D D E D    P E R S I S T E N C E    (TO BE IMPLEMENETED) -->
	<!--
	<bean id="persistenceManager" 
		class="de.comlineag.snc.persistence.Neo4JEmbeddedPersistence"> 
		<property name="protocol" value="t.b.d." /> 
		<property name="host" value="localhost" /> 
		<property name="port" value="7474" /> 
		<property name="location" value="/db/data" /> 
		<property name="DB_PATH" value="/db/data" /> 
	</bean> 
	-->

	<!-- M A P D B    P E R S I S T E N C E    (TO BE IMPLEMENTED) -->
	<!-- 
	<bean id="persistenceManager" class="de.comlineag.snc.persistence.MapDBPersistence"> 
		<property name="protocol" value="t.b.d." /> 
		<property name="host" value="localhost"	/> 
		<property name="port" value="t.b.d." /> 
		<property name="location" value="/db/data" /> 
		<property name="DB_PATH" value="/db/data" /> 
	</bean> 
	-->


	<!-- J O B    C O N T R O L    S E T T I N G S -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="autoStartup">
			<value>true</value>
		</property>

		<property name="overwriteExistingJobs">
			<value>true</value>
		</property>

		<property name="waitForJobsToCompleteOnShutdown">
			<!-- changed value from true to false <value>true</value> -->
			<value>false</value>
		</property>

		<property name="quartzProperties">
			<props>
				<!-- ThreadPool -->
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<!-- change this to the number of crawlers (see below) or the number of cores, whichever is higher -->
				<prop key="org.quartz.threadPool.threadCount">1</prop>
			</props>
		</property>
		<property name="triggers">
			<list>
				<!-- activate each crawler you want and make sure to increase the threadCount above correspondingly -->
				<!-- <ref bean="TwitterCrawlerTrigger" />  -->
				<!--<ref bean="FacebookCrawlerTrigger"/>-->
				<!--<ref bean="GoogleCrawlerTrigger"/> -->
				<!--<ref bean="LinkedinCrawlerTrigger"/> -->
				<!--<ref bean="FinanzforumCrawlerTrigger"/> -->
				<ref bean="LithiumCrawlerTrigger" />
			</list>
		</property>
	</bean>
</beans>
