<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	This is the xml configuration file for the social network connector.
	
	It is used to setup general options for the runtime behavior of the SNC.
	You can, for example, configure if the system shall create a json file 
	on disk, in case the creation of a dataset in the db fails.
	
	Second, the threading model for the different parts of the SNC can be configured
	here. Threading is a delicate topic, as the SNC is started from a quartz job
	scheduler and runs within the spring framework. Both frameworks bring their
	own multi-threading environment, but nevertheless, we need our own and eventually 
	need to tweak it - hence this section :-)
	
	Third, the XML structure for the configuration files of the actual crawler
	is configured in this file - but you are discouraged changing this.   
	
	Fourth, some general data definitions are set - like whether or not to truncate 
	specific fields (according to their respective field length) and if text shall be
	saved with or without markup elements (like html). 
	
	
	THIS IS REVISION 0.9a OF THE CONFIGURATION FILE - 10.10.2014
-->
<configurations>
	<!-- T H R E A D I N G   C O N F I G U R A T I O N
		 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		 This section contains options to modify the threading model of the SNC - mainly it configures
		 whether or not the three main parts of the SNC (crawler, parser and persistence) shall be called
		 in individual threads and what size the thread-pool shall have
	-->
	<configuration scope="threading">
		<!-- CrawlerThreading - configures threading and size of the thread pool for the crawler. 
			 if enabled, the executing searches against the endpoint (twitter api, or website etc)  
			 is executed within a separate thread -->
		<param name="CrawlerThreadingEnabled">
			<type>boolean</type>
			<value>false</value>
		</param>
		<param name="CrawlerThreadingPoolSize">
			<type>int</type>
			<value>5</value>
		</param>
		<!-- ParserThreading - configures threading and size of the thread pool for the parser 
			 if enabled, the call to the parser from the crawler is executed within a separate thread -->
		<param name="ParserThreadingEnabled">
			<type>boolean</type>
			<value>false</value>
		</param>
		<param name="ParserThreadingPoolSize">
			<type>int</type>
			<value>5</value>
		</param>
		<!-- PersistenceThreading - configures threading and size of the thread pool for the persistence layer 
			 if enabled, the call to the persistence to save posts and users from the parser is executed within 
			 a separate thread -->
		<param name="PersistenceThreadingEnabled">
			<type>boolean</type>
			<value>true</value>
		</param>
		<param name="PersistenceThreadingPoolSize">
			<type>int</type>
			<value>5</value>
		</param>
	</configuration>
	
	<!-- R U N T I M E   C O N F I G U R A T I O N
		 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		 This section contains options to change/modify the general runtime behavior of the SNC
	-->
	<configuration scope="runtime">
		<!-- location of the file with the social network definitions -->
		<param name="SocialNetworkFile">
			<type>String</type>
			<value>webapp/WEB-INF/SocialNetworkDefinitions.xml</value>
		</param>
		
		<!-- location of the file with the available parsers -->
		<param name="ParserListFilePath">
			<type>String</type>
			<value>webapp/WEB-INF/properties/webparser.xml</value>
		</param>
		
		<!-- location of the file with the configuration options for the hana database -->
		<param name="HanaConfigurationFilePath">
			<type>String</type>
			<value>webapp/WEB-INF/SNC_HANA_Configuration.xml</value>
		</param>
		
		
		<!-- show warning in case the simple INI file configuration is used -->
		<param name="WarnOnSimpleConfigOption">
			<type>boolean</type>
			<value>true</value>
			<constant>WARN_ON_SIMPLE_CONFIG_OPTION</constant>
		</param>
		<!-- show warning in case the simple XML file configuration is used -->
		<param name="WarnOnSimpleXmlConfigOption">
			<type>boolean</type>
			<value>true</value>
			<constant>WARN_ON_SIMPLE_XML_CONFIG_OPTION</constant>
		</param>
		<!-- show a debug message in case some actions are omitted due to configuration settings -->
		<param name="WarnOnRejectedActions">
			<type>boolean</type>
			<value>false</value>
			<constant>WARN_ON_REJECTED_ACTIONS</constant>
		</param>
		<!-- save a json file with the post data in case creating it in persistence fails -->
		<param name="CreatePostJsonOnError">
			<type>boolean</type>
			<value>true</value>
			<constant>CREATE_POST_JSON_ON_ERROR</constant>
		</param>
		<!-- save a json file with the user data in case creating it in persistence fails -->
		<param name="CreateUserJsonOnError">
			<type>boolean</type>
			<value>true</value>
			<constant>CREATE_USER_JSON_ON_ERROR</constant>
		</param>
		<!-- save a json file with the post data after creating it in persistence -->
		<param name="CreatePostJsonOnSuccess">
			<type>boolean</type>
			<value>false</value>
			<constant>CREATE_POST_JSON_ON_SUCCESS</constant>
		</param>
		<!-- save a json file with the user data after creating it in persistence -->
		<param name="CreateUserJsonOnSuccess">
			<type>boolean</type>
			<value>false</value>
			<constant>CREATE_USER_JSON_ON_SUCCESS</constant>
		</param>
		<!-- a storage directory under which the json files are stored in the below defined directories - must be in sync with the entry in applicationContext.xml -->
		<param name="StoragePath">
			<type>String</type>
			<value>storage</value>
			<constant>STORAGE_PATH</constant>
		</param>
		<!-- the path to the directory under which to save the json-files - must be in sync with the entry in applicationContext.xml -->
		<param name="JsonBackupStoragePath">
			<type>String</type>
			<value>json</value>
			<constant>JSON_BACKUP_STORAGE_PATH</constant>
		</param>
		<!-- the path to the directory under which to save processed json-files (files processed by FsCrawler) - must be in sync with the entry in applicationContext.xml -->
		<param name="ProcessedJsonBackupStoragePath">
			<type>String</type>
			<value>processedJson</value>
			<constant>PROCESSED_JSON_BACKUP_STORAGE_PATH</constant>
		</param>
		<!-- the path to the directory under which to store invalid json-files - must be in sync with the entry in applicationContext.xml -->
		<param name="InvalidJsonBackupStoragePath">
			<type>String</type>
			<value>invalidJson</value>
			<constant>INVALID_JSON_BACKUP_STORAGE_PATH</constant>
		</param>
		<!-- shall the crawler delete the failsave json files after processing or move the to above configured 2nd directory -->
		<param name="MoveOrDeleteProcessedJsonFiles">
			<type>String</type>
			<value>move</value>
			<constant>MOVE_OR_DELETE_PROCESSED_JSON_FILES</constant>
		</param>
		
		<!-- stop the SNC in case connecting to persistence fails and is thus unable to save posts and users?
			 Consequently, setting this to true is only useful, in case you do not setup the FsCrawler (see
			 applicationContext.xml) plus you do not save failed posts and users to disk - as configured with 
			 above parameters. -->
		<param name="ExitOnPersistenceFailure">
			<type>boolean</type>
			<value>false</value>
			<constant>STOP_SNC_ON_PERSISTENCE_FAILURE</constant>
		</param>
		
		
		
		<!-- SIMPLE AND MULTI WEB CRAWLER SPECIFIC SETTINGS -->
		<!-- searchLimit - how many pages to download at all.
			 This Runtime configuration acts as a safety margin to not exceed a certain maximum number of pages to download
			 per run and overides the value of max_pages in the crawler configuration. You can, however, also set this to 
			 -1 in which case there will be no limit on the number of downloaded pages. Be careful though, as this may 
			 lead to a huge amount of pages. As a last safeguard in case this value is set to -1, this will also implicitly 
			 set the parameter of stayOnDomain to true. -->
		<param name="wcSearchLimit">
			<type>int</type>
			<value>10000</value>
			<constant>WC_SEARCH_LIMIT</constant>
		</param>
		<!-- max_depth - how many levels of cascaded links to follow.
			 If you set this higher then the value of WC_MAX_DEPTH in SNC_Runtim_Configuration (currently 5) then 
			 that value will be used. This Runtime configuration acts as a safety margin to not exceed a certain scanning depth. 
			 You can, however, also set this to -1 in which case there will be no limit on how deep links will be followed
			 Be advised though, as this may lead to quite a huge amount of pages. As a last safeguard in case this value is set to 
			 -1, this will also implicitly set the parameter of stayOnDomain to true. -->
		<param name="wcMaxDepth">
			<type>int</type>
			<value>5</value>
			<constant>WC_MAX_DEPTH</constant>
		</param>
		<!-- the maximum page size the simple web crawler shall fetch -->
		<param name="wcCrawlerMaxDownloadSize">
			<type>int</type>
			<value>2000000</value>
			<constant>WC_CRAWLER_MAX_DOWNLOAD_SIZE</constant>
		</param>
		<!-- content types to fetch - NOT YET IMPLEMENTED -->
		<param name="wcContentTypesToDownload">
			<type>List</type>
			<value>html</value>
			<value>xml</value>
			<value>jpeg</value>
			<constant>WC_CONTENT_TYPES_TO_DOWNLOAD</constant>
		</param>
		
		<!-- whether or not the crawler is allowed to follow links off of the initial domain 
					 If set to true, then the crawler is NOT allowed to fetch pages from a new domain.
					 It is generally not recommended to set this to false (thus allowing to leave the 
					 domain) AND have a high value in max_depth and max_pages, as this could lead to 
					 a lot of pages being downloaded from any place on the net just by following some 
					 nice linklist one has setup on his/her page  -->
		<param name="wcStayOnDomain">
			<type>Boolean</type>
			<value>true</value>
			<constant>WC_STAY_ON_DOMAIN</constant>
		</param>
		
		<!-- Shall the crawler ONLY get pages below the initially given path
			 You can think of this option like an even stricter stayOnDomain. Not only we can't leave the
			 initial given domain, but any link encountered must point to some page on or below
			 the above given url. 
			 That also means, if you set this to true, you do not need to set stayOnDomain, or 
			 rather the value of stayOnDomain is ignored.
					 
			 Note: if you did not give path as part of the url, then / as the path starting point is used -->
		<param name="wcStayBelowGivenPath">
			<type>Boolean</type>
			<value>false</value>
			<constant>WC_STAY_BELOW_GIVEN_PATH</constant>
		</param>
		
		<!-- wordDistanceCutoffMargin - Distance from the searched word to cut off the text.
			 How many words shall be between the found word (as searched by via the trackTerms 
			 from CrawlerConfiguration) and the start and end of cut out text. This option applies
			 to the distance before and after the found word. -->
		<param name="wcWordDistanceCutoffMargin">
			<type>int</type>
			<value>30</value>
			<constant>WC_WORD_DISTANCE_CUTOFF_MARGIN</constant>
		</param>
		
		<!-- the command (word) as returned by a website when declining the crawler's request to fetch the content 
			 YOU SHOULD PROBABLY NOT CHANGE THIS -->
		<param name="wcRobotDisallowText">
			<type>String</type>
			<value>Disallow</value>
			<constant>WC_ROBOT_DISALLOW_TEXT</constant>
		</param>
	</configuration>
	
	
	
	<!-- DO NOT CHANGE ANYTHING BELOW THIS LINE, EXCEPT YOU ABSOLUTELY KNOW WHAT YOU ARE DOING
	     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	     
	     G E N E R A L   D A T A   D E F I N I T I O N S
	     In this section you can define how long certain fields are, for example how many  
	     characters a teaser can have and if a teaser shall be saved with markup elements or not. -->
	<configuration scope="DataDefinitions">
		<!-- shall a teaser be saved with or without html markup elements -->
		<param name="teaserWithMarkup">
			<type>boolean</type>
			<value>false</value>
			<constant>TEASER_WITH_MARKUP</constant>
		</param>
		<!-- how long shall a teaser be at max -->
		<param name="teaserMaxLength">
			<type>int</type>
			<value>256</value>
			<constant>TEASER_MAX_LENGTH</constant>
		</param>
		<!-- what shall the minimal length of a teaser be? -->
		<param name="teaserMinLength">
			<type>int</type>
			<value>20</value>
			<constant>TEASER_MIN_LENGTH</constant>
		</param>
		<!-- shall the subject of a post be saved with or without html markup elements -->
		<param name="subjectWithMarkup">
			<type>boolean</type>
			<value>false</value>
			<constant>SUBJECT_WITH_MARKUP</constant>
		</param>
		<param name="subjectMaxLength">
			<type>int</type>
			<value>100</value>
			<constant>SUBJECT_MAX_LENGTH</constant>
		</param>
		<param name="subjectMinLength">
			<type>int</type>
			<value>7</value>
			<constant>SUBJECT_MIN_LENGTH</constant>
		</param>
		<!-- shall the posts be saved with or without html markup elements - this should usually be kept false
			 the text-field of the database is normally only used for the semantic analysis and therefore does
			 not need any markups -->
		<param name="textWithMarkup">
			<type>boolean</type>
			<value>false</value>
			<constant>TEXT_WITH_MARKUP</constant>
		</param>
		<!-- shall the raw text field contain text with html markup elements - this should usually be kept true -->
		<param name="rawTextWithMarkup">
			<type>boolean</type>
			<value>true</value>
			<constant>RAW_TEXT_WITH_MARKUP</constant>
		</param>
	</configuration>
	
	<!-- X M L   L A Y O U T   C O N F I G U R A T I O N
	     the values in this section define how the crawler configuration xml files are structured.
		 Changing any of these values is possible to reflect changes in the xml configuration layout
		 but it is highly discouraged. -->
	<configuration scope="XmlLayout">
		<!-- identifies the parameter in crawler configuration that defines whether or not a specific crawler shall run -->
		<param name="crawlerRunIdentifier">
			<type>String</type>
			<value>CrawlerRun</value>
		</param>
		
		<!-- these values are for the constraints setup within crawler configuration. If, for example,
			 you don't want the configuration of a crawler be named constraint anymore, but rather
			 WhatYouShouldGet, then change the value of constraint to WhatYouShouldGet and adapt
			 the crawler configuration XML file accordingly -->
		<param name="constraintIdentifier">
			<type>String</type>
			<value>constraints</value>
		</param>
		<param name="singleConstraintIdentifier">
			<type>String</type>
			<value>constraint</value>
		</param>
		<param name="scopeOnAllValue">
			<type>String</type>
			<value>ALL</value>
		</param>
		<param name="codeIdentifier">
			<type>String</type>
			<value>code</value>
		</param>
		
		<!-- this section contains the identifier for domain of interest and customer used within the
			 crawler configuration XML file. -->
		<param name="customerIdentifier">
			<type>String</type>
			<value>customer</value>
		</param>
		<param name="customerNameIdentifier">
			<type>String</type>
			<value>name</value>
		</param>
		<param name="customerNameForAllValue">
			<type>String</type>
			<value>ALL</value>
		</param>
		<param name="domainIdentifier">
			<type>String</type>
			<value>domain</value>
		</param>
		<param name="domainStructureIdentifier">
			<type>String</type>
			<value>domainStructure</value>
		</param>
		<param name="domainNameIdentifier">
			<type>String</type>
			<value>name</value>
		</param>
		<param name="domainNameForAllValue">
			<type>String</type>
			<value>ALL</value>
		</param>
		
		<!-- these values define the naming of the single constraints definitions in crawler configuration -->
		<param name="CONSTRAINT_TERM_TEXT">
			<type>String</type>
			<value>term</value>
		</param>
		<param name="CONSTRAINT_USER_TEXT">
			<type>String</type>
			<value>user</value>
		</param>
		<param name="CONSTRAINT_LANGUAGE_TEXT">
			<type>String</type>
			<value>language</value>
		</param>
		<param name="CONSTRAINT_SITE_TEXT">
			<type>String</type>
			<value>site</value>
		</param>
		<param name="CONSTRAINT_BLOCKED_SITE_TEXT">
			<type>String</type>
			<value>blockedsite</value>
		</param>
		<param name="CONSTRAINT_BOARD_TEXT">
			<type>String</type>
			<value>board</value>
		</param>
		<param name="CONSTRAINT_BLOG_TEXT">
			<type>String</type>
			<value>blog</value>
		</param>
		<param name="CONSTRAINT_LOCATION_TEXT">
			<type>String</type>
			<value>geoLocation</value>
		</param>
		
		<!-- identifies the section containing socical network definitions in SocialNetworkDefinitions.xml-->
		<param name="socialNetworkConfiguration">
			<type>String</type>
			<value>socialNetworkDefinition</value>
		</param>
		<!-- identifies a configuration for a social network -->
		<param name="socialNetworkIdentifier">
			<type>String</type>
			<value>network</value>
		</param>
		<!-- identifies the name of a social network -->
		<param name="socialNetworkNameIdentifier">
			<type>String</type>
			<value>name</value>
		</param>
		<!-- identifies the section within crawler configuration file that declares with which
			 kind of configuration manager the file type is associated -->
		<param name="configFileTypeIdentifier">
			<type>String</type>
			<value>configFileType</value>
		</param>
		
		<!-- from these values the threading model can be constructed (see top of the file section Threading). 
			 For example, if you want to change the name of the ParserThreading-section (although I really
			 have no clue why you would want to do so) to FriedaThreading, then all you have to do is change
			 the value in section PARSER_NAME from Parser to Frieda. -->
		<param name="THREADING_NAME">
			<type>Sting</type>
			<value>Threading</value>
		</param>
		<param name="PARSER_NAME">
			<type>Sting</type>
			<value>Parser</value>
		</param>
		<param name="CRAWLER_NAME">
			<type>Sting</type>
			<value>Crawler</value>
		</param>
		<param name="PERSISTENCE_NAME">
			<type>Sting</type>
			<value>Persistence</value>
		</param>
		
		
		<!-- 
			 for stability and startup reasons these last 4 layout elements (root-, 
			 singleConfiguration-, value- and scopeIdentifier) CAN NOT BE CHANGED! 
			 even if you do so here, this won't have any effect as they need to be 
			 and are hard coded in the RuntimeConfiguration class. 
		 -->
		<param name="rootIdentifier"> 				<!-- not changeable -->
			<type>String</type>
			<value>configurations</value>
		</param>
		<param name="singleConfigurationIdentifier"> <!-- not changeable -->
			<type>String</type>
			<value>configuration</value>
		</param>
		<param name="valueIdentifier"> 				<!-- not changeable -->
			<type>String</type>
			<value>value</value>
		</param>
		<param name="scopeIdentifier"> 				<!-- not changeable -->
			<type>String</type>
			<value>scope</value>
		</param>
	</configuration>
</configurations>